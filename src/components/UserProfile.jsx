// src/components/UserProfile.jsx
import { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { UserContext } from "./content/UserContent"; // Import Context ng∆∞·ªùi d√πng
import { ToastContainer, toast } from "react-toastify"; // Import th∆∞ vi·ªán Toast th√¥ng b√°o
import bcrypt from "bcryptjs"; // Import th∆∞ vi·ªán m√£ h√≥a m·∫≠t kh·∫©u
import "react-toastify/dist/ReactToastify.css"; // Import CSS cho Toast

function UserProfile() {
  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng v√† tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ Context
  const { userId, isUserLoggedIn } = useContext(UserContext);
  // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng trang (quan tr·ªçng: c·∫ßn c√≥ <BrowserRouter> bao b·ªçc ·ª©ng d·ª•ng)
  const navigate = useNavigate();

  // State l∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng l·∫•y t·ª´ API
  const [userData, setUserData] = useState(null);
  // State c·ªù b√°o hi·ªáu ƒëang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng
  const [loadingUser, setLoadingUser] = useState(true);

  // State cho c√°c tr∆∞·ªùng trong form ƒë·ªïi m·∫≠t kh·∫©u
  const [oldPassword, setOldPassword] = useState(""); // M·∫≠t kh·∫©u c≈©
  const [newPassword, setNewPassword] = useState(""); // M·∫≠t kh·∫©u m·ªõi
  const [confirmNewPassword, setConfirmNewPassword] = useState(""); // X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
  const [passwordError, setPasswordError] = useState(""); // Th√¥ng b√°o l·ªói m·∫≠t kh·∫©u
  const [passwordLoading, setPasswordLoading] = useState(false); // C·ªù b√°o hi·ªáu ƒëang x·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u

  // State cho form ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán (l∆∞u URL)
  const [avatarUrl, setAvatarUrl] = useState(""); // URL ·∫£nh ƒë·∫°i di·ªán
  const [avatarLoading, setAvatarLoading] = useState(false); // C·ªù b√°o hi·ªáu ƒëang x·ª≠ l√Ω ƒë·ªïi avatar
  const [avatarError, setAvatarError] = useState(""); // Th√¥ng b√°o l·ªói avatar

  // useEffect Hook: Ch·∫°y khi component ƒë∆∞·ª£c mount ho·∫∑c userId thay ƒë·ªïi
  // M·ª•c ƒë√≠ch: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API
  useEffect(() => {
    let isMounted = true; // C·ªù ƒë·ªÉ ki·ªÉm tra component c√≤n t·ªìn t·∫°i (tr√°nh l·ªói memory leak)

    // Ch·ªâ fetch d·ªØ li·ªáu n·∫øu c√≥ userId
    if (userId) {
      setLoadingUser(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i loading
      fetch(`http://localhost:3001/users/${userId}`) // G·ªçi API l·∫•y th√¥ng tin user
        .then((res) => {
          // N·∫øu response kh√¥ng th√†nh c√¥ng (status kh√¥ng ph·∫£i 2xx)
          if (!res.ok) {
            // C·ªë g·∫Øng ƒë·ªçc n·ªôi dung l·ªói t·ª´ response body
            return res.text().then((text) => {
              let errorMsg = `Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng (Status: ${res.status})`;
              try {
                const errorBody = JSON.parse(text);
                errorMsg = errorBody.message || errorMsg;
              } catch (e) {
                /* B·ªè qua l·ªói parse */
              }
              throw new Error(errorMsg); // N√©m l·ªói
            });
          }
          return res.json(); // N·∫øu th√†nh c√¥ng, parse response th√†nh JSON
        })
        .then((data) => {
          // Ch·ªâ c·∫≠p nh·∫≠t state n·∫øu component v·∫´n c√≤n mounted
          if (isMounted) {
            setUserData(data); // L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng
            setAvatarUrl(data.avatar || ""); // C·∫≠p nh·∫≠t URL avatar
            setLoadingUser(false); // K·∫øt th√∫c loading
          }
        })
        .catch((err) => {
          // Ch·ªâ x·ª≠ l√Ω l·ªói n·∫øu component v·∫´n c√≤n mounted
          if (isMounted) {
            console.error("L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng:", err);
            toast.error(`L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: ${err.message}`, {
              autoClose: 4000,
            });
            setLoadingUser(false); // K·∫øt th√∫c loading
            setUserData(null); // ƒê·∫∑t l·∫°i userData khi l·ªói
          }
        });
    } else {
      // N·∫øu kh√¥ng c√≥ userId
      if (isMounted) {
        setLoadingUser(false);
        setUserData(null);
      }
    }

    // H√†m cleanup: Ch·∫°y khi component b·ªã unmount
    return () => {
      isMounted = false; // ƒê√°nh d·∫•u ƒë√£ unmount
    };
  }, [userId]); // Ch·∫°y l·∫°i n·∫øu userId thay ƒë·ªïi

  // H√†m x·ª≠ l√Ω s·ª± ki·ªán submit form ƒë·ªïi m·∫≠t kh·∫©u
  const handleChangePassword = async (e) => {
    e.preventDefault(); // NgƒÉn form submit g√¢y reload trang
    setPasswordError("");
    if (!oldPassword || !newPassword || !confirmNewPassword) {
      setPasswordError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
      return;
    }
    if (newPassword.length < 6) {
      setPasswordError("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
      return;
    }
    if (newPassword !== confirmNewPassword) {
      setPasswordError("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.");
      return;
    }
    if (!userData || !userData.password) {
      setPasswordError("Kh√¥ng th·ªÉ x√°c th·ª±c m·∫≠t kh·∫©u c≈©.");
      return;
    }

    setPasswordLoading(true);

    // 1. X√°c th·ª±c m·∫≠t kh·∫©u c≈©
    const isOldPasswordCorrect = bcrypt.compareSync(
      oldPassword,
      userData.password
    );

    if (!isOldPasswordCorrect) {
      setPasswordError("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng.");
      setPasswordLoading(false);
      return;
    }

    // 2. Ki·ªÉm tra n·∫øu m·∫≠t kh·∫©u m·ªõi tr√πng v·ªõi m·∫≠t kh·∫©u c≈©
    const isNewPasswordSameAsOld = bcrypt.compareSync(
      newPassword,
      userData.password
    );
    if (isNewPasswordSameAsOld) {
      setPasswordError("M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©.");
      setPasswordLoading(false);
      return;
    }

    // 3. M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const salt = bcrypt.genSaltSync(10);
    const hashedNewPassword = bcrypt.hashSync(newPassword, salt);

    try {
      // 4. G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t l√™n API
      const res = await fetch(`http://localhost:3001/users/${userId}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ password: hashedNewPassword }),
      });

      if (!res.ok) throw new Error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u");

      // Reset form
      setOldPassword("");
      setNewPassword("");
      setConfirmNewPassword("");
      setUserData({ ...userData, password: hashedNewPassword });

      // Hi·ªÉn th·ªã alert v√† chuy·ªÉn v·ªÅ trang ch·ªß
      alert("üéâ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      navigate("/");
    } catch (err) {
      setPasswordError("ƒê√£ x·∫£y ra l·ªói: " + err.message);
      alert("‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u!");
    } finally {
      setPasswordLoading(false);
    }
  };

  // H√†m x·ª≠ l√Ω s·ª± ki·ªán submit form ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán
  const handleChangeAvatar = async (e) => {
    e.preventDefault(); // NgƒÉn form t·∫£i l·∫°i trang
    setAvatarError(""); // X√≥a l·ªói c≈©
    setAvatarLoading(true); // B·∫≠t loading

    // Ki·ªÉm tra URL
    if (!avatarUrl || !/^https?:\/\/.+\..+/.test(avatarUrl)) {
      setAvatarError("Vui l√≤ng nh·∫≠p URL ·∫£nh ƒë·∫°i di·ªán h·ª£p l·ªá.");
      setAvatarLoading(false);
      return;
    }

    try {
      // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t avatar
      const res = await fetch(`http://localhost:3001/users/${userId}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ avatar: avatarUrl }),
      });

      // X·ª≠ l√Ω n·∫øu API l·ªói
      if (!res.ok) {
        let errorMsg = `L·ªói ${res.status} khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán`;
        try {
          const errorBody = await res.json();
          errorMsg = errorBody.message || errorMsg;
        } catch (parseError) {
          errorMsg = res.statusText || errorMsg;
        }
        throw new Error(errorMsg);
      }

      // X·ª≠ l√Ω khi th√†nh c√¥ng
      toast.success("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!", { autoClose: 3000 });
      setUserData((prevUserData) => ({ ...prevUserData, avatar: avatarUrl })); // C·∫≠p nh·∫≠t state local
      setAvatarError(""); // X√≥a l·ªói
    } catch (err) {
      // B·∫Øt v√† x·ª≠ l√Ω l·ªói
      console.error("L·ªói khi ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán:", err);
      setAvatarError("ƒê√£ x·∫£y ra l·ªói: " + err.message);
      toast.error(`L·ªói khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán: ${err.message}`, {
        autoClose: 4000,
      });
    } finally {
      // Lu√¥n t·∫Øt loading
      setAvatarLoading(false);
    }
  };

  // --- Logic Render Component ---

  // Hi·ªÉn th·ªã loading khi ƒëang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng
  if (loadingUser) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        ƒêang t·∫£i th√¥ng tin h·ªì s∆°...
      </div>
    );
  }

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ch∆∞a ƒëƒÉng nh·∫≠p
  if (!isUserLoggedIn) {
    return (
      <div className="flex flex-col justify-center items-center min-h-screen text-center">
        <p className="text-red-600 mb-4">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem h·ªì s∆°.</p>
        <button
          onClick={() => navigate("/login")}
          className="px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          ƒêƒÉng nh·∫≠p
        </button>
      </div>
    );
  }

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng
  if (!userData) {
    return (
      <div className="flex flex-col justify-center items-center min-h-screen text-center">
        <p className="text-red-600 mb-4">
          Kh√¥ng th·ªÉ t·∫£i h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i sau.
        </p>
        <button
          onClick={() => window.location.reload()}
          className="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition"
        >
          T·∫£i l·∫°i trang
        </button>
      </div>
    );
  }

  // Render giao di·ªán ch√≠nh
  return (
    <div className="min-h-screen bg-gray-100 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 space-y-8">
        <h1 className="text-3xl font-bold text-gray-800 text-center">
          H·ªì s∆° c·ªßa b·∫°n
        </h1>

        {/* Ph·∫ßn th√¥ng tin c∆° b·∫£n */}
        <div className="bg-white p-6 rounded-lg shadow-md overflow-hidden">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">
            Th√¥ng tin c∆° b·∫£n
          </h2>
          <div className="flex items-center space-x-4 mb-4">
            <img
              key={userData.avatar}
              src={
                userData.avatar ||
                `https://ui-avatars.com/api/?name=${encodeURIComponent(
                  userData.username || "User"
                )}&background=random&size=80`
              }
              alt={`Avatar c·ªßa ${userData.username}`}
              className="w-20 h-20 rounded-full object-cover border-2 border-gray-200 flex-shrink-0"
              onError={(e) => {
                const fallbackSrc = `https://ui-avatars.com/api/?name=${encodeURIComponent(
                  userData.username || "User"
                )}&background=random&size=80`;
                if (e.target.src !== fallbackSrc) {
                  e.target.onerror = null;
                  e.target.src = fallbackSrc;
                }
              }}
            />
            <div className="min-w-0">
              <p className="text-lg font-medium text-gray-900 truncate">
                {userData.username}
              </p>
            </div>
          </div>
        </div>

        {/* Ph·∫ßn ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">
            ƒê·ªïi ·∫£nh ƒë·∫°i di·ªán
          </h2>
          <form onSubmit={handleChangeAvatar} className="space-y-4">
            <div>
              <label
                htmlFor="avatarUrl"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                URL ·∫£nh ƒë·∫°i di·ªán m·ªõi
              </label>
              <input
                id="avatarUrl"
                type="url"
                value={avatarUrl}
                onChange={(e) => {
                  setAvatarUrl(e.target.value);
                  if (avatarError) setAvatarError("");
                }}
                placeholder="https://example.com/image.jpg"
                className={`w-full px-4 py-2 border ${
                  avatarError ? "border-red-500" : "border-gray-300"
                } rounded-lg focus:ring-blue-500 focus:border-blue-500 transition`}
                disabled={avatarLoading}
                aria-describedby="avatar-error-message"
              />
              <p className="text-xs text-gray-500 mt-1">
                Nh·∫≠p URL tr·ª±c ti·∫øp ƒë·∫øn ·∫£nh (v√≠ d·ª•: .jpg, .png, .gif).
              </p>
            </div>
            {avatarError && (
              <p
                id="avatar-error-message"
                className="text-red-500 text-sm mt-1"
              >
                {avatarError}
              </p>
            )}
            <button
              type="submit"
              disabled={avatarLoading || !avatarUrl.trim()}
              className="inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition"
            >
              {avatarLoading ? "ƒêang l∆∞u..." : "L∆∞u ·∫£nh ƒë·∫°i di·ªán"}
            </button>
          </form>
        </div>

        {/* Ph·∫ßn ƒë·ªïi m·∫≠t kh·∫©u */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">
            ƒê·ªïi m·∫≠t kh·∫©u
          </h2>
          <form onSubmit={handleChangePassword} className="space-y-4">
            {/* M·∫≠t kh·∫©u c≈© */}
            <div>
              <label
                htmlFor="oldPassword"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                M·∫≠t kh·∫©u c≈©
              </label>
              <input
                id="oldPassword"
                type="password"
                value={oldPassword}
                onChange={(e) => {
                  setOldPassword(e.target.value);
                  if (passwordError) setPasswordError("");
                }}
                className={`w-full px-4 py-2 border ${
                  passwordError.includes("c≈©")
                    ? "border-red-500"
                    : "border-gray-300"
                } rounded-lg focus:ring-indigo-500 focus:border-indigo-500 transition`}
                required
                autoComplete="current-password"
                disabled={passwordLoading}
                aria-describedby="password-error-message"
              />
            </div>
            {/* M·∫≠t kh·∫©u m·ªõi */}
            <div>
              <label
                htmlFor="newPassword"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                M·∫≠t kh·∫©u m·ªõi (√≠t nh·∫•t 6 k√Ω t·ª±)
              </label>
              <input
                id="newPassword"
                type="password"
                value={newPassword}
                onChange={(e) => {
                  setNewPassword(e.target.value);
                  if (passwordError) setPasswordError("");
                }}
                className={`w-full px-4 py-2 border ${
                  passwordError && !passwordError.includes("c≈©")
                    ? "border-red-500"
                    : "border-gray-300"
                } rounded-lg focus:ring-indigo-500 focus:border-indigo-500 transition`}
                required
                minLength={6}
                autoComplete="new-password"
                disabled={passwordLoading}
                aria-describedby="password-error-message"
              />
            </div>
            {/* X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi */}
            <div>
              <label
                htmlFor="confirmNewPassword"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
              </label>
              <input
                id="confirmNewPassword"
                type="password"
                value={confirmNewPassword}
                onChange={(e) => {
                  setConfirmNewPassword(e.target.value);
                  if (passwordError) setPasswordError("");
                }}
                className={`w-full px-4 py-2 border ${
                  passwordError.includes("kh·ªõp")
                    ? "border-red-500"
                    : "border-gray-300"
                } rounded-lg focus:ring-indigo-500 focus:border-indigo-500 transition`}
                required
                minLength={6}
                autoComplete="new-password"
                disabled={passwordLoading}
                aria-describedby="password-error-message"
              />
            </div>
            {/* Hi·ªÉn th·ªã l·ªói m·∫≠t kh·∫©u */}
            {passwordError && (
              <p
                id="password-error-message"
                className="text-red-500 text-sm mt-1"
              >
                {passwordError}
              </p>
            )}
            {/* N√∫t submit */}
            <button
              type="submit"
              disabled={
                passwordLoading ||
                !oldPassword ||
                !newPassword ||
                !confirmNewPassword
              }
              className="inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition"
            >
              {passwordLoading ? "ƒêang ƒë·ªïi..." : "ƒê·ªïi m·∫≠t kh·∫©u"}
            </button>
          </form>
        </div>

        {/* N√∫t quay l·∫°i trang ch·ªß */}
        <div className="text-center mt-6">
          <button
            onClick={() => navigate("/")}
            className="inline-flex justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition"
          >
            Quay l·∫°i trang ch·ªß
          </button>
        </div>
      </div>
      {/* Container cho toast */}
      <ToastContainer
        position="top-right"
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />
    </div>
  );
}

export default UserProfile;
